name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        exclude:
          # Reduce CI load by excluding some combinations
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          shared-key: "ci"

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build
        run: cargo build --verbose --all-features

      - name: Run unit tests
        run: cargo test --verbose --lib --all-features

      - name: Run doc tests
        run: cargo test --verbose --doc --all-features

  docker-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          shared-key: "security"

      - name: Start Docker
        run: |
          sudo systemctl start docker
          docker --version

      - name: Pull test images
        run: |
          docker pull alpine:latest
          docker pull redis:7.2-alpine
          docker pull nginx:alpine

      - name: Run integration tests
        run: cargo test --verbose --test phase2_integration --all-features
        env:
          DOCKER_HOST: unix:///var/run/docker.sock

      - name: Test examples
        run: |
          cargo check --examples --all-features
          echo "All examples compile successfully"

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          shared-key: "integration"

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          shared-key: "coverage"

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Start Docker
        run: |
          sudo systemctl start docker
          docker pull alpine:latest

      - name: Generate code coverage
        run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out Xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: cobertura.xml
          fail_ci_if_error: false

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust 1.70.0
        uses: dtolnay/rust-toolchain@1.70.0

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          shared-key: "msrv"

      - name: Build with MSRV
        run: cargo build --verbose --all-features

      - name: Test with MSRV
        run: cargo test --verbose --lib --all-features

  docs:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          shared-key: "docs"

      - name: Build documentation
        run: cargo doc --verbose --all-features --no-deps
        env:
          RUSTDOCFLAGS: -D warnings

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          shared-key: "benchmarks"

      - name: Start Docker
        run: |
          sudo systemctl start docker
          docker pull alpine:latest

      - name: Run benchmarks (if available)
        run: |
          if [ -d "benches" ]; then
            cargo bench --verbose --all-features
          else
            echo "No benchmarks found, skipping"
          fi

  validate-adr:
    name: Validate ADR System
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate ADR structure
        run: |
          if [ -f ".claude/adr-helper.sh" ]; then
            chmod +x .claude/adr-helper.sh
            ./.claude/adr-helper.sh validate
          else
            echo "ADR system not found, skipping validation"
          fi

      - name: Check ADR index
        run: |
          if [ -f ".claude/adr-index.toml" ]; then
            echo "ADR index found"
            cat .claude/adr-index.toml
          else
            echo "ADR index not found"
          fi
