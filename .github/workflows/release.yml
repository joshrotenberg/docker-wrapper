name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 0.1.1)"
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$'; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi

      - name: Check Cargo.toml version
        run: |
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          RELEASE_VERSION="${{ steps.get_version.outputs.version }}"
          if [ "$CARGO_VERSION" != "$RELEASE_VERSION" ]; then
            echo "Version mismatch: Cargo.toml has $CARGO_VERSION, releasing $RELEASE_VERSION"
            exit 1
          fi

      - name: Run full test suite
        run: |
          cargo fmt -- --check
          cargo clippy --all-targets --all-features -- -D warnings
          cargo test --verbose --lib --all-features
          cargo doc --all-features --no-deps

  test-release:
    name: Test Release Package
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Test packaging
        run: |
          cargo package --verbose
          cargo package --list

      - name: Test local install
        run: |
          cargo install --path . --force --verbose

      - name: Verify installation
        run: |
          # Test that the library can be used
          cargo new test-docker-wrapper --lib
          cd test-docker-wrapper
          echo 'docker-wrapper = { path = ".." }' >> Cargo.toml
          echo 'use docker_wrapper::*;' > src/lib.rs
          cargo check

  docker-integration:
    name: Docker Integration Test
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          shared-key: "release-validate"

      - name: Start Docker
        run: |
          sudo systemctl start docker
          docker --version

      - name: Pull test images
        run: |
          docker pull alpine:latest
          docker pull redis:7.2-alpine

      - name: Run integration tests
        run: cargo test --verbose --test phase2_integration --all-features
        env:
          DOCKER_HOST: unix:///var/run/docker.sock

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  publish-crates-io:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: [validate, test-release, docker-integration, security-audit]
    environment: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --verbose
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, publish-crates-io]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          echo "# Docker Wrapper v$VERSION" > release_notes.md
          echo "" >> release_notes.md

          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG" >> release_notes.md
            echo "" >> release_notes.md
            git log --oneline --no-merges $PREV_TAG..HEAD >> release_notes.md
          else
            echo "## Initial Release" >> release_notes.md
            echo "" >> release_notes.md
            echo "This is the first release of docker-wrapper." >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo '```toml' >> release_notes.md
          echo '[dependencies]' >> release_notes.md
          echo "docker-wrapper = \"$VERSION\"" >> release_notes.md
          echo '```' >> release_notes.md

          echo "" >> release_notes.md
          echo "## Documentation" >> release_notes.md
          echo "" >> release_notes.md
          echo "- [docs.rs](https://docs.rs/docker-wrapper/$VERSION)" >> release_notes.md
          echo "- [crates.io](https://crates.io/crates/docker-wrapper)" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: Docker Wrapper v${{ needs.validate.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate, create-github-release]
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build documentation
        run: |
          cargo doc --all-features --no-deps
          echo '<meta http-equiv="refresh" content="0; url=docker_wrapper">' > target/doc/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs:
      [validate, publish-crates-io, create-github-release, update-documentation]
    if: success()

    steps:
      - name: Release Summary
        run: |
          echo "üéâ Successfully released Docker Wrapper v${{ needs.validate.outputs.version }}"
          echo ""
          echo "üì¶ Published to crates.io: https://crates.io/crates/docker-wrapper"
          echo "üè∑Ô∏è  GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate.outputs.version }}"
          echo "üìö Documentation: https://docs.rs/docker-wrapper/${{ needs.validate.outputs.version }}"
          echo ""
          echo "Installation:"
          echo "cargo add docker-wrapper@${{ needs.validate.outputs.version }}"

  notify-failure:
    name: Notify Release Failure
    runs-on: ubuntu-latest
    needs:
      [
        validate,
        test-release,
        docker-integration,
        security-audit,
        publish-crates-io,
        create-github-release,
      ]
    if: failure()

    steps:
      - name: Failure Summary
        run: |
          echo "‚ùå Release failed for Docker Wrapper v${{ needs.validate.outputs.version }}"
          echo ""
          echo "Please check the workflow logs and fix any issues before retrying."
          echo "You may need to:"
          echo "1. Fix any test failures"
          echo "2. Address security audit issues"
          echo "3. Resolve packaging problems"
          echo "4. Check crates.io publishing permissions"
